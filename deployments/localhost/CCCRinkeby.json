{
  "address": "0xBA98017090903e19812064c77275A99Dc3306613",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_t1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_t2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_t3",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_t4",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_t5",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SOULS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SOUL_PROVENANCE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSoulsPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "val",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "reserveSouls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "saveLostSoul",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "provenanceHash",
          "type": "string"
        }
      ],
      "name": "setProvenanceHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x062709d3fda173b6d405a8047a865cda3a50deac19b91fec46840fceb125a187",
  "receipt": {
    "to": null,
    "from": "0xc64ed4d552a97d875bCc6C9048d3992Ec842071A",
    "contractAddress": "0xBA98017090903e19812064c77275A99Dc3306613",
    "transactionIndex": 0,
    "gasUsed": "2414735",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000001000000000000000000000000000000000000020000000001000000000800000000000000000000000000000000400200000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000020000000000000000000000000000000000000004000000000000000000000000000",
    "blockHash": "0x26506ce3c82c46a3387911332e682d7b65f0c69ed813911fd0a5522ac06e6190",
    "transactionHash": "0x062709d3fda173b6d405a8047a865cda3a50deac19b91fec46840fceb125a187",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x062709d3fda173b6d405a8047a865cda3a50deac19b91fec46840fceb125a187",
        "address": "0xBA98017090903e19812064c77275A99Dc3306613",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c64ed4d552a97d875bcc6c9048d3992ec842071a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x26506ce3c82c46a3387911332e682d7b65f0c69ed813911fd0a5522ac06e6190"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2414735",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCdDc78C88eb76ECe9052B535c3ED4e0236d51334",
    "0xe891a92692c60dE1Bb251430A0fCd3522Ef74DA5",
    "0x4Bb1Dee9656Ec6E3eC3Fb839e17313F2aE5EC887",
    "0xc64ed4d552a97d875bCc6C9048d3992Ec842071A",
    "0xc64ed4d552a97d875bCc6C9048d3992Ec842071A"
  ],
  "solcInputHash": "9797e766eddc4247f53198fa3c8d29ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_t1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_t2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_t3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_t4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_t5\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SOULS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOUL_PROVENANCE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSoulsPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reserveSouls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"saveLostSoul\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provenanceHash\",\"type\":\"string\"}],\"name\":\"setProvenanceHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CCCRinkeby.sol\":\"CCCRinkeby\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/CCCRinkeby.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Lost Souls Sanctuary's research has lead us to uncover earth shattering truths about how our souls navigate in the after-life.\\n// What we've found is truly shocking, something that various three letter agencies won't like, or worse try to supress/slander if the information was released via mutable channels.\\n// Souls roam this very earth frantically trying to make whole with the universe before their time is up and they are forever striken to the bowels of the underworld.\\n// All hope is not lost! Though the discovery of the Higgs boson particle a group of ghost-savers have established communication with 10,000 Lost Souls and struck a deal. \\n// The deal: a Sanctuary will be setup to help the Souls discover their mistakes, changes their lives and pass through to the elusive good place,\\n// in return the Lost Souls Sanctuary will be given exclusive access to study the ectoplasmic layer the Soul's reside in so we may better understand our mortal role here on Earth.\\n\\n// <3 LS Sanctuary team\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract CCCRinkeby is ERC721Enumerable, Ownable {\\n\\n    using Strings for uint256;\\n\\n    string public SOUL_PROVENANCE = \\\"\\\";\\n    string _baseTokenURI;\\n    uint256 public constant MAX_SOULS = 99999;\\n    uint256 private soulReserved = 100;\\n    uint256 public constant maxSoulsPurchase = 20;\\n    uint256 private soulPrice = 0.03 ether;\\n    bool public salePaused = true;\\n\\n    // Team - 25%\\n    address t1;\\n    address t2;\\n    address t3;\\n    address t4;\\n    // Community Wallet - 75%\\n    address t5;\\n\\n    constructor(\\n        address _t1,\\n        address _t2,\\n        address _t3,\\n        address _t4,\\n        address _t5\\n        ) ERC721(\\\"CCCRinkeby\\\", \\\"CCCR\\\")  {\\n        t1 = _t1;\\n        t2 = _t2;\\n        t3 = _t3;\\n        t4 = _t4;\\n        t5 = _t5;\\n    }\\n\\n    function saveLostSoul(uint256 num) public payable {\\n        uint256 supply = totalSupply();\\n        require( !salePaused,                              \\\"Sale paused\\\" );\\n        require( num <= maxSoulsPurchase,                  \\\"You can adopt a maximum of 20 Souls\\\" );\\n        require( supply + num <= MAX_SOULS - soulReserved, \\\"Exceeds maximum Souls supply\\\" );\\n        require( msg.value >= soulPrice * num,             \\\"Ether sent is not correct\\\" );\\n\\n        for(uint256 i; i < num; i++){\\n            _safeMint( msg.sender, supply + i );\\n        }\\n    }\\n\\n    function walletOfOwner(address _owner) public view returns(uint256[] memory) {\\n        uint256 tokenCount = balanceOf(_owner);\\n\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\n        for(uint256 i; i < tokenCount; i++){\\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokensId;\\n    }\\n\\n    function setProvenanceHash(string memory provenanceHash) public onlyOwner {\\n        SOUL_PROVENANCE = provenanceHash;\\n    }\\n\\n    function setPrice(uint256 _newPrice) public onlyOwner() {\\n        soulPrice = _newPrice;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function setBaseURI(string memory baseURI) public onlyOwner {\\n        _baseTokenURI = baseURI;\\n    }\\n\\n    function getPrice() public view returns (uint256){\\n        return soulPrice;\\n    }\\n\\n    function reserveSouls(address _to, uint256 _amount) external onlyOwner() {\\n        require( _amount <= soulReserved, \\\"Exceeds reserved Soul supply\\\" );\\n\\n        uint256 supply = totalSupply();\\n        for(uint256 i; i < _amount; i++){\\n            _safeMint( _to, supply + i );\\n        }\\n\\n        soulReserved -= _amount;\\n    }\\n\\n    function pause(bool val) public onlyOwner {\\n        salePaused = val;\\n    }\\n\\n    function withdrawAll() public payable onlyOwner {\\n        uint sale1 = address(this).balance * 4  / 100;\\n        uint sale2 = address(this).balance * 3  / 100;\\n        uint sale3 = address(this).balance * 10 / 100;\\n        uint sale4 = address(this).balance * 10 / 100;\\n        uint sale5 = address(this).balance * 73 / 100;\\n\\n        require(payable(t1).send(sale1));\\n        require(payable(t2).send(sale2));\\n        require(payable(t3).send(sale3));\\n        require(payable(t4).send(sale4));\\n        require(payable(t5).send(sale5));\\n    }\\n}\",\"keccak256\":\"0x9c9507907ff1661d79b6240126f2088355d9ae7965193d413d0c3c843ffe163a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040819052600060808190526200001b91600b91620001ad565b506064600d55666a94d74f430000600e55600f805460ff191660011790553480156200004657600080fd5b506040516200298838038062002988833981016040819052620000699162000270565b604080518082018252600a81526943434352696e6b65627960b01b60208083019182528351808501909452600484526321a1a1a960e11b908401528151919291620000b791600091620001ad565b508051620000cd906001906020840190620001ad565b505050620000ea620000e46200015760201b60201c565b6200015b565b600f80546001600160a01b0396871661010002610100600160a81b0319909116179055601080549486166001600160a01b0319958616179055601180549386169385169390931790925560128054918516918416919091179055601380549190931691161790556200031c565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001bb90620002df565b90600052602060002090601f016020900481019282620001df57600085556200022a565b82601f10620001fa57805160ff19168380011785556200022a565b828001600101855582156200022a579182015b828111156200022a5782518255916020019190600101906200020d565b50620002389291506200023c565b5090565b5b808211156200023857600081556001016200023d565b80516001600160a01b03811681146200026b57600080fd5b919050565b600080600080600060a0868803121562000288578081fd5b620002938662000253565b9450620002a36020870162000253565b9350620002b36040870162000253565b9250620002c36060870162000253565b9150620002d36080870162000253565b90509295509295909350565b600281046001821680620002f457607f821691505b602082108114156200031657634e487b7160e01b600052602260045260246000fd5b50919050565b61265c806200032c6000396000f3fe6080604052600436106101e35760003560e01c8063715018a611610102578063b88d4fde11610095578063d2a2c55711610064578063d2a2c55714610539578063db83ef871461054e578063e985e9c514610561578063f2fde38b14610581576101e3565b8063b88d4fde146104c4578063c87b56dd146104e4578063c9c4d03e14610504578063cdf6d3f914610519576101e3565b806391b7f5ed116100d157806391b7f5ed1461045a57806395d89b411461047a57806398d5fdca1461048f578063a22cb465146104a4576101e3565b8063715018a614610413578063853828b6146104285780638bfb9671146104305780638da5cb5b14610445576101e3565b80632f745c591161017a57806355f804b31161014957806355f804b31461039e5780635d08c1ae146103be5780636352211e146103d357806370a08231146103f3576101e3565b80632f745c591461031157806342842e0e14610331578063438b6300146103515780634f6ccce71461037e576101e3565b8063095ea7b3116101b6578063095ea7b31461028f57806310969523146102af57806318160ddd146102cf57806323b872dd146102f1576101e3565b806301ffc9a7146101e857806302329a291461021e57806306fdde0314610240578063081812fc14610262575b600080fd5b3480156101f457600080fd5b50610208610203366004611d1f565b6105a1565b6040516102159190611ea5565b60405180910390f35b34801561022a57600080fd5b5061023e610239366004611d05565b6105ce565b005b34801561024c57600080fd5b50610255610629565b6040516102159190611eb0565b34801561026e57600080fd5b5061028261027d366004611d9d565b6106bb565b6040516102159190611e10565b34801561029b57600080fd5b5061023e6102aa366004611cdc565b6106fe565b3480156102bb57600080fd5b5061023e6102ca366004611d57565b610796565b3480156102db57600080fd5b506102e46107ec565b60405161021591906124cd565b3480156102fd57600080fd5b5061023e61030c366004611bff565b6107f2565b34801561031d57600080fd5b506102e461032c366004611cdc565b61082a565b34801561033d57600080fd5b5061023e61034c366004611bff565b61087c565b34801561035d57600080fd5b5061037161036c366004611bb3565b610897565b6040516102159190611e61565b34801561038a57600080fd5b506102e4610399366004611d9d565b610955565b3480156103aa57600080fd5b5061023e6103b9366004611d57565b6109b0565b3480156103ca57600080fd5b50610208610a02565b3480156103df57600080fd5b506102826103ee366004611d9d565b610a0b565b3480156103ff57600080fd5b506102e461040e366004611bb3565b610a40565b34801561041f57600080fd5b5061023e610a84565b61023e610acf565b34801561043c57600080fd5b506102e4610c9a565b34801561045157600080fd5b50610282610ca1565b34801561046657600080fd5b5061023e610475366004611d9d565b610cb0565b34801561048657600080fd5b50610255610cf4565b34801561049b57600080fd5b506102e4610d03565b3480156104b057600080fd5b5061023e6104bf366004611cb3565b610d09565b3480156104d057600080fd5b5061023e6104df366004611c3a565b610dd7565b3480156104f057600080fd5b506102556104ff366004611d9d565b610e16565b34801561051057600080fd5b50610255610e99565b34801561052557600080fd5b5061023e610534366004611cdc565b610f27565b34801561054557600080fd5b506102e4610fe1565b61023e61055c366004611d9d565b610fe6565b34801561056d57600080fd5b5061020861057c366004611bcd565b6110c7565b34801561058d57600080fd5b5061023e61059c366004611bb3565b6110f5565b60006001600160e01b0319821663780e9d6360e01b14806105c657506105c682611166565b90505b919050565b6105d66111a6565b6001600160a01b03166105e7610ca1565b6001600160a01b0316146106165760405162461bcd60e51b815260040161060d906122a8565b60405180910390fd5b600f805460ff1916911515919091179055565b60606000805461063890612564565b80601f016020809104026020016040519081016040528092919081815260200182805461066490612564565b80156106b15780601f10610686576101008083540402835291602001916106b1565b820191906000526020600020905b81548152906001019060200180831161069457829003601f168201915b5050505050905090565b60006106c6826111aa565b6106e25760405162461bcd60e51b815260040161060d9061225c565b506000908152600460205260409020546001600160a01b031690565b600061070982610a0b565b9050806001600160a01b0316836001600160a01b0316141561073d5760405162461bcd60e51b815260040161060d90612375565b806001600160a01b031661074f6111a6565b6001600160a01b0316148061076b575061076b8161057c6111a6565b6107875760405162461bcd60e51b815260040161060d90612100565b61079183836111c7565b505050565b61079e6111a6565b6001600160a01b03166107af610ca1565b6001600160a01b0316146107d55760405162461bcd60e51b815260040161060d906122a8565b80516107e890600b906020840190611a83565b5050565b60085490565b6108036107fd6111a6565b82611235565b61081f5760405162461bcd60e51b815260040161060d906123ed565b6107918383836112ba565b600061083583610a40565b82106108535760405162461bcd60e51b815260040161060d90611f1f565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61079183838360405180602001604052806000815250610dd7565b606060006108a483610a40565b905060008167ffffffffffffffff8111156108cf57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108f8578160200160208202803683370190505b50905060005b8281101561094d57610910858261082a565b82828151811061093057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806109458161259f565b9150506108fe565b509392505050565b600061095f6107ec565b821061097d5760405162461bcd60e51b815260040161060d90612481565b6008828154811061099e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6109b86111a6565b6001600160a01b03166109c9610ca1565b6001600160a01b0316146109ef5760405162461bcd60e51b815260040161060d906122a8565b80516107e890600c906020840190611a83565b600f5460ff1681565b6000818152600260205260408120546001600160a01b0316806105c65760405162461bcd60e51b815260040161060d906121a7565b60006001600160a01b038216610a685760405162461bcd60e51b815260040161060d9061215d565b506001600160a01b031660009081526003602052604090205490565b610a8c6111a6565b6001600160a01b0316610a9d610ca1565b6001600160a01b031614610ac35760405162461bcd60e51b815260040161060d906122a8565b610acd60006113e7565b565b610ad76111a6565b6001600160a01b0316610ae8610ca1565b6001600160a01b031614610b0e5760405162461bcd60e51b815260040161060d906122a8565b60006064610b1d476004612502565b610b2791906124ee565b905060006064610b38476003612502565b610b4291906124ee565b905060006064610b5347600a612502565b610b5d91906124ee565b905060006064610b6e47600a612502565b610b7891906124ee565b905060006064610b89476049612502565b610b9391906124ee565b600f5460405191925061010090046001600160a01b0316906108fc8715029087906000818181858888f19350505050610bcb57600080fd5b6010546040516001600160a01b039091169085156108fc029086906000818181858888f19350505050610bfd57600080fd5b6011546040516001600160a01b039091169084156108fc029085906000818181858888f19350505050610c2f57600080fd5b6012546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050610c6157600080fd5b6013546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050610c9357600080fd5b5050505050565b6201869f81565b600a546001600160a01b031690565b610cb86111a6565b6001600160a01b0316610cc9610ca1565b6001600160a01b031614610cef5760405162461bcd60e51b815260040161060d906122a8565b600e55565b60606001805461063890612564565b600e5490565b610d116111a6565b6001600160a01b0316826001600160a01b03161415610d425760405162461bcd60e51b815260040161060d9061207d565b8060056000610d4f6111a6565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610d936111a6565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610dcb9190611ea5565b60405180910390a35050565b610de8610de26111a6565b83611235565b610e045760405162461bcd60e51b815260040161060d906123ed565b610e1084848484611439565b50505050565b6060610e21826111aa565b610e3d5760405162461bcd60e51b815260040161060d90612326565b6000610e4761146c565b90506000815111610e675760405180602001604052806000815250610e92565b80610e718461147b565b604051602001610e82929190611de1565b6040516020818303038152906040525b9392505050565b600b8054610ea690612564565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed290612564565b8015610f1f5780601f10610ef457610100808354040283529160200191610f1f565b820191906000526020600020905b815481529060010190602001808311610f0257829003601f168201915b505050505081565b610f2f6111a6565b6001600160a01b0316610f40610ca1565b6001600160a01b031614610f665760405162461bcd60e51b815260040161060d906122a8565b600d54811115610f885760405162461bcd60e51b815260040161060d90611ee8565b6000610f926107ec565b905060005b82811015610fc457610fb284610fad83856124d6565b611596565b80610fbc8161259f565b915050610f97565b5081600d6000828254610fd79190612521565b9091555050505050565b601481565b6000610ff06107ec565b600f5490915060ff16156110165760405162461bcd60e51b815260040161060d90611ec3565b60148211156110375760405162461bcd60e51b815260040161060d9061243e565b600d54611047906201869f612521565b61105183836124d6565b111561106f5760405162461bcd60e51b815260040161060d90612225565b81600e5461107d9190612502565b34101561109c5760405162461bcd60e51b815260040161060d906123b6565b60005b82811015610791576110b533610fad83856124d6565b806110bf8161259f565b91505061109f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6110fd6111a6565b6001600160a01b031661110e610ca1565b6001600160a01b0316146111345760405162461bcd60e51b815260040161060d906122a8565b6001600160a01b03811661115a5760405162461bcd60e51b815260040161060d90611fbc565b611163816113e7565b50565b60006001600160e01b031982166380ac58cd60e01b148061119757506001600160e01b03198216635b5e139f60e01b145b806105c657506105c6826115b0565b3390565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906111fc82610a0b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611240826111aa565b61125c5760405162461bcd60e51b815260040161060d906120b4565b600061126783610a0b565b9050806001600160a01b0316846001600160a01b031614806112a25750836001600160a01b0316611297846106bb565b6001600160a01b0316145b806112b257506112b281856110c7565b949350505050565b826001600160a01b03166112cd82610a0b565b6001600160a01b0316146112f35760405162461bcd60e51b815260040161060d906122dd565b6001600160a01b0382166113195760405162461bcd60e51b815260040161060d90612039565b6113248383836115c9565b61132f6000826111c7565b6001600160a01b0383166000908152600360205260408120805460019290611358908490612521565b90915550506001600160a01b03821660009081526003602052604081208054600192906113869084906124d6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6114448484846112ba565b61145084848484611652565b610e105760405162461bcd60e51b815260040161060d90611f6a565b6060600c805461063890612564565b6060816114a057506040805180820190915260018152600360fc1b60208201526105c9565b8160005b81156114ca57806114b48161259f565b91506114c39050600a836124ee565b91506114a4565b60008167ffffffffffffffff8111156114f357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561151d576020820181803683370190505b5090505b84156112b257611532600183612521565b915061153f600a866125ba565b61154a9060306124d6565b60f81b81838151811061156d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061158f600a866124ee565b9450611521565b6107e882826040518060200160405280600081525061176d565b6001600160e01b031981166301ffc9a760e01b14919050565b6115d4838383610791565b6001600160a01b0383166115f0576115eb816117a0565b611613565b816001600160a01b0316836001600160a01b0316146116135761161383826117e4565b6001600160a01b03821661162f5761162a81611881565b610791565b826001600160a01b0316826001600160a01b03161461079157610791828261195a565b6000611666846001600160a01b031661199e565b1561176257836001600160a01b031663150b7a026116826111a6565b8786866040518563ffffffff1660e01b81526004016116a49493929190611e24565b602060405180830381600087803b1580156116be57600080fd5b505af19250505080156116ee575060408051601f3d908101601f191682019092526116eb91810190611d3b565b60015b611748573d80801561171c576040519150601f19603f3d011682016040523d82523d6000602084013e611721565b606091505b5080516117405760405162461bcd60e51b815260040161060d90611f6a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112b2565b506001949350505050565b61177783836119a4565b6117846000848484611652565b6107915760405162461bcd60e51b815260040161060d90611f6a565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b600060016117f184610a40565b6117fb9190612521565b60008381526007602052604090205490915080821461184e576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061189390600190612521565b600083815260096020526040812054600880549394509092849081106118c957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106118f857634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061193e57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061196583610a40565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b3b151590565b6001600160a01b0382166119ca5760405162461bcd60e51b815260040161060d906121f0565b6119d3816111aa565b156119f05760405162461bcd60e51b815260040161060d90612002565b6119fc600083836115c9565b6001600160a01b0382166000908152600360205260408120805460019290611a259084906124d6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611a8f90612564565b90600052602060002090601f016020900481019282611ab15760008555611af7565b82601f10611aca57805160ff1916838001178555611af7565b82800160010185558215611af7579182015b82811115611af7578251825591602001919060010190611adc565b50611b03929150611b07565b5090565b5b80821115611b035760008155600101611b08565b600067ffffffffffffffff80841115611b3757611b376125fa565b604051601f8501601f191681016020018281118282101715611b5b57611b5b6125fa565b604052848152915081838501861015611b7357600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b03811681146105c957600080fd5b803580151581146105c957600080fd5b600060208284031215611bc4578081fd5b610e9282611b8c565b60008060408385031215611bdf578081fd5b611be883611b8c565b9150611bf660208401611b8c565b90509250929050565b600080600060608486031215611c13578081fd5b611c1c84611b8c565b9250611c2a60208501611b8c565b9150604084013590509250925092565b60008060008060808587031215611c4f578081fd5b611c5885611b8c565b9350611c6660208601611b8c565b925060408501359150606085013567ffffffffffffffff811115611c88578182fd5b8501601f81018713611c98578182fd5b611ca787823560208401611b1c565b91505092959194509250565b60008060408385031215611cc5578182fd5b611cce83611b8c565b9150611bf660208401611ba3565b60008060408385031215611cee578182fd5b611cf783611b8c565b946020939093013593505050565b600060208284031215611d16578081fd5b610e9282611ba3565b600060208284031215611d30578081fd5b8135610e9281612610565b600060208284031215611d4c578081fd5b8151610e9281612610565b600060208284031215611d68578081fd5b813567ffffffffffffffff811115611d7e578182fd5b8201601f81018413611d8e578182fd5b6112b284823560208401611b1c565b600060208284031215611dae578081fd5b5035919050565b60008151808452611dcd816020860160208601612538565b601f01601f19169290920160200192915050565b60008351611df3818460208801612538565b835190830190611e07818360208801612538565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e5790830184611db5565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611e9957835183529284019291840191600101611e7d565b50909695505050505050565b901515815260200190565b600060208252610e926020830184611db5565b6020808252600b908201526a14d85b19481c185d5cd95960aa1b604082015260600190565b6020808252601c908201527f4578636565647320726573657276656420536f756c20737570706c7900000000604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252601c908201527f45786365656473206d6178696d756d20536f756c7320737570706c7900000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526019908201527f45746865722073656e74206973206e6f7420636f727265637400000000000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526023908201527f596f752063616e2061646f70742061206d6178696d756d206f6620323020536f604082015262756c7360e81b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b90815260200190565b600082198211156124e9576124e96125ce565b500190565b6000826124fd576124fd6125e4565b500490565b600081600019048311821515161561251c5761251c6125ce565b500290565b600082821015612533576125336125ce565b500390565b60005b8381101561255357818101518382015260200161253b565b83811115610e105750506000910152565b60028104600182168061257857607f821691505b6020821081141561259957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156125b3576125b36125ce565b5060010190565b6000826125c9576125c96125e4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461116357600080fdfea264697066735822122069dce90666b058cd3ef99fdfe97b95ad93c03ef397e88489f6c9cbf05e53d7c864736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063715018a611610102578063b88d4fde11610095578063d2a2c55711610064578063d2a2c55714610539578063db83ef871461054e578063e985e9c514610561578063f2fde38b14610581576101e3565b8063b88d4fde146104c4578063c87b56dd146104e4578063c9c4d03e14610504578063cdf6d3f914610519576101e3565b806391b7f5ed116100d157806391b7f5ed1461045a57806395d89b411461047a57806398d5fdca1461048f578063a22cb465146104a4576101e3565b8063715018a614610413578063853828b6146104285780638bfb9671146104305780638da5cb5b14610445576101e3565b80632f745c591161017a57806355f804b31161014957806355f804b31461039e5780635d08c1ae146103be5780636352211e146103d357806370a08231146103f3576101e3565b80632f745c591461031157806342842e0e14610331578063438b6300146103515780634f6ccce71461037e576101e3565b8063095ea7b3116101b6578063095ea7b31461028f57806310969523146102af57806318160ddd146102cf57806323b872dd146102f1576101e3565b806301ffc9a7146101e857806302329a291461021e57806306fdde0314610240578063081812fc14610262575b600080fd5b3480156101f457600080fd5b50610208610203366004611d1f565b6105a1565b6040516102159190611ea5565b60405180910390f35b34801561022a57600080fd5b5061023e610239366004611d05565b6105ce565b005b34801561024c57600080fd5b50610255610629565b6040516102159190611eb0565b34801561026e57600080fd5b5061028261027d366004611d9d565b6106bb565b6040516102159190611e10565b34801561029b57600080fd5b5061023e6102aa366004611cdc565b6106fe565b3480156102bb57600080fd5b5061023e6102ca366004611d57565b610796565b3480156102db57600080fd5b506102e46107ec565b60405161021591906124cd565b3480156102fd57600080fd5b5061023e61030c366004611bff565b6107f2565b34801561031d57600080fd5b506102e461032c366004611cdc565b61082a565b34801561033d57600080fd5b5061023e61034c366004611bff565b61087c565b34801561035d57600080fd5b5061037161036c366004611bb3565b610897565b6040516102159190611e61565b34801561038a57600080fd5b506102e4610399366004611d9d565b610955565b3480156103aa57600080fd5b5061023e6103b9366004611d57565b6109b0565b3480156103ca57600080fd5b50610208610a02565b3480156103df57600080fd5b506102826103ee366004611d9d565b610a0b565b3480156103ff57600080fd5b506102e461040e366004611bb3565b610a40565b34801561041f57600080fd5b5061023e610a84565b61023e610acf565b34801561043c57600080fd5b506102e4610c9a565b34801561045157600080fd5b50610282610ca1565b34801561046657600080fd5b5061023e610475366004611d9d565b610cb0565b34801561048657600080fd5b50610255610cf4565b34801561049b57600080fd5b506102e4610d03565b3480156104b057600080fd5b5061023e6104bf366004611cb3565b610d09565b3480156104d057600080fd5b5061023e6104df366004611c3a565b610dd7565b3480156104f057600080fd5b506102556104ff366004611d9d565b610e16565b34801561051057600080fd5b50610255610e99565b34801561052557600080fd5b5061023e610534366004611cdc565b610f27565b34801561054557600080fd5b506102e4610fe1565b61023e61055c366004611d9d565b610fe6565b34801561056d57600080fd5b5061020861057c366004611bcd565b6110c7565b34801561058d57600080fd5b5061023e61059c366004611bb3565b6110f5565b60006001600160e01b0319821663780e9d6360e01b14806105c657506105c682611166565b90505b919050565b6105d66111a6565b6001600160a01b03166105e7610ca1565b6001600160a01b0316146106165760405162461bcd60e51b815260040161060d906122a8565b60405180910390fd5b600f805460ff1916911515919091179055565b60606000805461063890612564565b80601f016020809104026020016040519081016040528092919081815260200182805461066490612564565b80156106b15780601f10610686576101008083540402835291602001916106b1565b820191906000526020600020905b81548152906001019060200180831161069457829003601f168201915b5050505050905090565b60006106c6826111aa565b6106e25760405162461bcd60e51b815260040161060d9061225c565b506000908152600460205260409020546001600160a01b031690565b600061070982610a0b565b9050806001600160a01b0316836001600160a01b0316141561073d5760405162461bcd60e51b815260040161060d90612375565b806001600160a01b031661074f6111a6565b6001600160a01b0316148061076b575061076b8161057c6111a6565b6107875760405162461bcd60e51b815260040161060d90612100565b61079183836111c7565b505050565b61079e6111a6565b6001600160a01b03166107af610ca1565b6001600160a01b0316146107d55760405162461bcd60e51b815260040161060d906122a8565b80516107e890600b906020840190611a83565b5050565b60085490565b6108036107fd6111a6565b82611235565b61081f5760405162461bcd60e51b815260040161060d906123ed565b6107918383836112ba565b600061083583610a40565b82106108535760405162461bcd60e51b815260040161060d90611f1f565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61079183838360405180602001604052806000815250610dd7565b606060006108a483610a40565b905060008167ffffffffffffffff8111156108cf57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108f8578160200160208202803683370190505b50905060005b8281101561094d57610910858261082a565b82828151811061093057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806109458161259f565b9150506108fe565b509392505050565b600061095f6107ec565b821061097d5760405162461bcd60e51b815260040161060d90612481565b6008828154811061099e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6109b86111a6565b6001600160a01b03166109c9610ca1565b6001600160a01b0316146109ef5760405162461bcd60e51b815260040161060d906122a8565b80516107e890600c906020840190611a83565b600f5460ff1681565b6000818152600260205260408120546001600160a01b0316806105c65760405162461bcd60e51b815260040161060d906121a7565b60006001600160a01b038216610a685760405162461bcd60e51b815260040161060d9061215d565b506001600160a01b031660009081526003602052604090205490565b610a8c6111a6565b6001600160a01b0316610a9d610ca1565b6001600160a01b031614610ac35760405162461bcd60e51b815260040161060d906122a8565b610acd60006113e7565b565b610ad76111a6565b6001600160a01b0316610ae8610ca1565b6001600160a01b031614610b0e5760405162461bcd60e51b815260040161060d906122a8565b60006064610b1d476004612502565b610b2791906124ee565b905060006064610b38476003612502565b610b4291906124ee565b905060006064610b5347600a612502565b610b5d91906124ee565b905060006064610b6e47600a612502565b610b7891906124ee565b905060006064610b89476049612502565b610b9391906124ee565b600f5460405191925061010090046001600160a01b0316906108fc8715029087906000818181858888f19350505050610bcb57600080fd5b6010546040516001600160a01b039091169085156108fc029086906000818181858888f19350505050610bfd57600080fd5b6011546040516001600160a01b039091169084156108fc029085906000818181858888f19350505050610c2f57600080fd5b6012546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050610c6157600080fd5b6013546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050610c9357600080fd5b5050505050565b6201869f81565b600a546001600160a01b031690565b610cb86111a6565b6001600160a01b0316610cc9610ca1565b6001600160a01b031614610cef5760405162461bcd60e51b815260040161060d906122a8565b600e55565b60606001805461063890612564565b600e5490565b610d116111a6565b6001600160a01b0316826001600160a01b03161415610d425760405162461bcd60e51b815260040161060d9061207d565b8060056000610d4f6111a6565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610d936111a6565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610dcb9190611ea5565b60405180910390a35050565b610de8610de26111a6565b83611235565b610e045760405162461bcd60e51b815260040161060d906123ed565b610e1084848484611439565b50505050565b6060610e21826111aa565b610e3d5760405162461bcd60e51b815260040161060d90612326565b6000610e4761146c565b90506000815111610e675760405180602001604052806000815250610e92565b80610e718461147b565b604051602001610e82929190611de1565b6040516020818303038152906040525b9392505050565b600b8054610ea690612564565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed290612564565b8015610f1f5780601f10610ef457610100808354040283529160200191610f1f565b820191906000526020600020905b815481529060010190602001808311610f0257829003601f168201915b505050505081565b610f2f6111a6565b6001600160a01b0316610f40610ca1565b6001600160a01b031614610f665760405162461bcd60e51b815260040161060d906122a8565b600d54811115610f885760405162461bcd60e51b815260040161060d90611ee8565b6000610f926107ec565b905060005b82811015610fc457610fb284610fad83856124d6565b611596565b80610fbc8161259f565b915050610f97565b5081600d6000828254610fd79190612521565b9091555050505050565b601481565b6000610ff06107ec565b600f5490915060ff16156110165760405162461bcd60e51b815260040161060d90611ec3565b60148211156110375760405162461bcd60e51b815260040161060d9061243e565b600d54611047906201869f612521565b61105183836124d6565b111561106f5760405162461bcd60e51b815260040161060d90612225565b81600e5461107d9190612502565b34101561109c5760405162461bcd60e51b815260040161060d906123b6565b60005b82811015610791576110b533610fad83856124d6565b806110bf8161259f565b91505061109f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6110fd6111a6565b6001600160a01b031661110e610ca1565b6001600160a01b0316146111345760405162461bcd60e51b815260040161060d906122a8565b6001600160a01b03811661115a5760405162461bcd60e51b815260040161060d90611fbc565b611163816113e7565b50565b60006001600160e01b031982166380ac58cd60e01b148061119757506001600160e01b03198216635b5e139f60e01b145b806105c657506105c6826115b0565b3390565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906111fc82610a0b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611240826111aa565b61125c5760405162461bcd60e51b815260040161060d906120b4565b600061126783610a0b565b9050806001600160a01b0316846001600160a01b031614806112a25750836001600160a01b0316611297846106bb565b6001600160a01b0316145b806112b257506112b281856110c7565b949350505050565b826001600160a01b03166112cd82610a0b565b6001600160a01b0316146112f35760405162461bcd60e51b815260040161060d906122dd565b6001600160a01b0382166113195760405162461bcd60e51b815260040161060d90612039565b6113248383836115c9565b61132f6000826111c7565b6001600160a01b0383166000908152600360205260408120805460019290611358908490612521565b90915550506001600160a01b03821660009081526003602052604081208054600192906113869084906124d6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6114448484846112ba565b61145084848484611652565b610e105760405162461bcd60e51b815260040161060d90611f6a565b6060600c805461063890612564565b6060816114a057506040805180820190915260018152600360fc1b60208201526105c9565b8160005b81156114ca57806114b48161259f565b91506114c39050600a836124ee565b91506114a4565b60008167ffffffffffffffff8111156114f357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561151d576020820181803683370190505b5090505b84156112b257611532600183612521565b915061153f600a866125ba565b61154a9060306124d6565b60f81b81838151811061156d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061158f600a866124ee565b9450611521565b6107e882826040518060200160405280600081525061176d565b6001600160e01b031981166301ffc9a760e01b14919050565b6115d4838383610791565b6001600160a01b0383166115f0576115eb816117a0565b611613565b816001600160a01b0316836001600160a01b0316146116135761161383826117e4565b6001600160a01b03821661162f5761162a81611881565b610791565b826001600160a01b0316826001600160a01b03161461079157610791828261195a565b6000611666846001600160a01b031661199e565b1561176257836001600160a01b031663150b7a026116826111a6565b8786866040518563ffffffff1660e01b81526004016116a49493929190611e24565b602060405180830381600087803b1580156116be57600080fd5b505af19250505080156116ee575060408051601f3d908101601f191682019092526116eb91810190611d3b565b60015b611748573d80801561171c576040519150601f19603f3d011682016040523d82523d6000602084013e611721565b606091505b5080516117405760405162461bcd60e51b815260040161060d90611f6a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112b2565b506001949350505050565b61177783836119a4565b6117846000848484611652565b6107915760405162461bcd60e51b815260040161060d90611f6a565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b600060016117f184610a40565b6117fb9190612521565b60008381526007602052604090205490915080821461184e576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061189390600190612521565b600083815260096020526040812054600880549394509092849081106118c957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106118f857634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061193e57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061196583610a40565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b3b151590565b6001600160a01b0382166119ca5760405162461bcd60e51b815260040161060d906121f0565b6119d3816111aa565b156119f05760405162461bcd60e51b815260040161060d90612002565b6119fc600083836115c9565b6001600160a01b0382166000908152600360205260408120805460019290611a259084906124d6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611a8f90612564565b90600052602060002090601f016020900481019282611ab15760008555611af7565b82601f10611aca57805160ff1916838001178555611af7565b82800160010185558215611af7579182015b82811115611af7578251825591602001919060010190611adc565b50611b03929150611b07565b5090565b5b80821115611b035760008155600101611b08565b600067ffffffffffffffff80841115611b3757611b376125fa565b604051601f8501601f191681016020018281118282101715611b5b57611b5b6125fa565b604052848152915081838501861015611b7357600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b03811681146105c957600080fd5b803580151581146105c957600080fd5b600060208284031215611bc4578081fd5b610e9282611b8c565b60008060408385031215611bdf578081fd5b611be883611b8c565b9150611bf660208401611b8c565b90509250929050565b600080600060608486031215611c13578081fd5b611c1c84611b8c565b9250611c2a60208501611b8c565b9150604084013590509250925092565b60008060008060808587031215611c4f578081fd5b611c5885611b8c565b9350611c6660208601611b8c565b925060408501359150606085013567ffffffffffffffff811115611c88578182fd5b8501601f81018713611c98578182fd5b611ca787823560208401611b1c565b91505092959194509250565b60008060408385031215611cc5578182fd5b611cce83611b8c565b9150611bf660208401611ba3565b60008060408385031215611cee578182fd5b611cf783611b8c565b946020939093013593505050565b600060208284031215611d16578081fd5b610e9282611ba3565b600060208284031215611d30578081fd5b8135610e9281612610565b600060208284031215611d4c578081fd5b8151610e9281612610565b600060208284031215611d68578081fd5b813567ffffffffffffffff811115611d7e578182fd5b8201601f81018413611d8e578182fd5b6112b284823560208401611b1c565b600060208284031215611dae578081fd5b5035919050565b60008151808452611dcd816020860160208601612538565b601f01601f19169290920160200192915050565b60008351611df3818460208801612538565b835190830190611e07818360208801612538565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e5790830184611db5565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611e9957835183529284019291840191600101611e7d565b50909695505050505050565b901515815260200190565b600060208252610e926020830184611db5565b6020808252600b908201526a14d85b19481c185d5cd95960aa1b604082015260600190565b6020808252601c908201527f4578636565647320726573657276656420536f756c20737570706c7900000000604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252601c908201527f45786365656473206d6178696d756d20536f756c7320737570706c7900000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526019908201527f45746865722073656e74206973206e6f7420636f727265637400000000000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526023908201527f596f752063616e2061646f70742061206d6178696d756d206f6620323020536f604082015262756c7360e81b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b90815260200190565b600082198211156124e9576124e96125ce565b500190565b6000826124fd576124fd6125e4565b500490565b600081600019048311821515161561251c5761251c6125ce565b500290565b600082821015612533576125336125ce565b500390565b60005b8381101561255357818101518382015260200161253b565b83811115610e105750506000910152565b60028104600182168061257857607f821691505b6020821081141561259957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156125b3576125b36125ce565b5060010190565b6000826125c9576125c96125e4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461116357600080fdfea264697066735822122069dce90666b058cd3ef99fdfe97b95ad93c03ef397e88489f6c9cbf05e53d7c864736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1070,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1074,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1077,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1081,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2021,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "SOUL_PROVENANCE",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 2023,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2029,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "soulReserved",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2035,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "soulPrice",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2038,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "salePaused",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 2040,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "t1",
        "offset": 1,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 2042,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "t2",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 2044,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "t3",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 2046,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "t4",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 2048,
        "contract": "contracts/CCCRinkeby.sol:CCCRinkeby",
        "label": "t5",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}